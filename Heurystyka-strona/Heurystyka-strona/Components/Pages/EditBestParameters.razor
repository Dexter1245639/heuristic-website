@page "/editbestparameters"
@rendermode InteractiveServer
@inject HttpClient HttpClient
@using System.Timers

<PageTitle>Single Algorithm</PageTitle>

<div class="algorithm-header">
    <div>
        <h2>Choose algorithm:</h2>
    </div>
</div>

<div class="algorithm-choose">
    <div>
        <select @onchange="OnAlgorithmChanged" class="custom-select" name="select_algorithm" id="select_algorithm">
            @if (Algorithms == null || !Algorithms.Any())
            {
                <option disabled>Loading...</option>
            }
            else
            {
                @foreach (var algorithm in Algorithms)
                {
                    <option value="@algorithm">@algorithm</option>
                }
            }
        </select>
    </div>
</div>

<div class="data-header">
    <div>
        <h2>Edit best parameters:</h2>
    </div>
</div>

<div class="data-input-domains">
    @if (NumberOfParameters > 0)
    {
        @for (int o = 0; o < NumberOfParameters; o++)
		{
            int localIndex_2 = o;
            <div class="dimension-block">
                <h3>@algorithmParametersNames[o] - @parametersDescription[o]</h3>
            </div>
            
            <div class="dimension-block">
                <input type="number" step="0.1" min="-100" max="100" class="custom-input" @bind="ParameterValuesData[localIndex_2]" />
            </div>
        }
    }
    else
    {
        <div class="data-input">
            <p>No parameters to input.</p>
        </div>
    }
</div>

<div class="data-header">
    <h2>@statusMessage</h2>
</div>

<div class="data-header">
    @if (NumberOfParameters > 0)
    {
        <button class="btnSubmit" @onclick="SubmitData">Submit</button>
    }
</div>



@code {
    private List<string> Algorithms { get; set; } = [""];
    private string AlgorithmName = "ArtificialBeeColony";
    private List<double[]> Parameters = new List<double[]>
    {

        new double[] { -2, 2, 2, -2 }
    };
    private string statusMessage = "Awaiting submission...";

    private int NumberOfParameters = 0;

    private List<double> ParameterValuesData { get; set; } = new();
    private string[] algorithmParametersNames = new string[] { };
    private string[] parametersDescription = new string[] { };


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Algorithms = await HttpClient.GetFromJsonAsync<List<string>>("/api/Options/algorithms");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching algorithms: {ex.Message}");
        }
    }


    private async Task SubmitData()
    {
        try
        {
            var payload = new AlgorithmData
                {
                    Id = Guid.NewGuid().ToString(),
                    AlgorithmName = AlgorithmName,
                    Parameters = algorithmParametersNames.Select((paramName, index) => new AlgorithmParameter
                    {
                        Id = Guid.NewGuid().ToString(),
                        ParameterName = paramName,
                        ParameterValue = ParameterValuesData[index]
                    }).ToList()
                };

            var response = await HttpClient.PostAsJsonAsync("/api/Database", payload);

            if (response.IsSuccessStatusCode)
            {
                statusMessage = "Submission successful!";
            }
            else
            {
                statusMessage = $"Error: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Exception: {ex.Message}";
        }
    }



    private async Task OnAlgorithmChanged(ChangeEventArgs e)
    {
        AlgorithmName = e.Value?.ToString();
        if (!string.IsNullOrEmpty(AlgorithmName))
        {
            var apiParametersLink = $"/api/Database/Parametry?name={AlgorithmName}";
            var api_parameters_desc = $"/opisy?name={AlgorithmName}";

            try
            {
                var response = await HttpClient.GetAsync(apiParametersLink);
                parametersDescription = await HttpClient.GetFromJsonAsync<string[]>(api_parameters_desc);

                if (response.IsSuccessStatusCode)
                {
                    var algorithmData = await response.Content.ReadFromJsonAsync<AlgorithmData>();

                    if (algorithmData?.Parameters != null && algorithmData.Parameters.Any())
                    {
                        algorithmParametersNames = algorithmData.Parameters.Select(p => p.ParameterName).ToArray();
                        ParameterValuesData = algorithmData.Parameters.Select(p => p.ParameterValue).ToList();
                        NumberOfParameters = ParameterValuesData.Count;
                    }
                    else
                    {
                        ResetParameters();
                    }
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    ResetParameters();
                }
                else
                {
                    Console.Error.WriteLine($"Unexpected response: {response.StatusCode}");
                    ResetParameters();
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error fetching parameters: {ex.Message}");
                ResetParameters();
            }
        }
    }

    private void ResetParameters()
    {
        algorithmParametersNames = Array.Empty<string>();
        ParameterValuesData.Clear();
        NumberOfParameters = 0;
    }



    private class AlgorithmParameter
    {
        public string Id { get; set; }
        public string ParameterName { get; set; }
        public double ParameterValue { get; set; }
    }

    private class AlgorithmData
    {
        public string Id { get; set; }
        public string AlgorithmName { get; set; }
        public List<AlgorithmParameter> Parameters { get; set; }
    }




}

<style>


    .algorithm-header {
        position: relative;
        width: 100%;
        height: 50px;
        display: flex;
        justify-content: center;
        align-items: center;
        padding-bottom: 20px;
    }

    .algorithm-choose {
        position: relative;
        width: 100%;
        height: 50px;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 20px;
    }

    .custom-select {
        font-size: 16px;
        width: 200px;
        padding: 5px;
        height: 50px;
        border-radius: 5px;
        border: 5px solid #ccc;
    }

    .custom-select-load {
        font-size: 16px;
        width: 100px;
        padding: 5px;
        height: 50px;
        border-radius: 5px;
        border: 5px solid #ccc;
    }


    .data-header {
        padding: 20px;
        position: relative;
        width: 100%;
        height: 80px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .data-header-load {
        padding: 20px;
        position: relative;
        width: 100%;
        height: 80px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .data-input {
        position: relative;
        width: 100%;
        height: 50px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .data-input-load {
        position: relative;
        width: 100%;
        height: 50px;
        display: flex;
        justify-content: center;
        align-items: center;
    }


    .custom-input {
        font-size: 16px;
        padding: 10px;
        width: 100px;
        text-align: center;
        height: 45px;
        border-radius: 5px;
        border: 5px solid #ccc;
    }


    .generated-inputs {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
        margin-top: 20px;
    }

        .generated-inputs input {
            width: 50%;
            padding: 10px;
            margin: 5px 0;
            border: 5px solid #ccc;
            border-radius: 5px;
            text-align: center;
        }

    .data-header-domains {
        text-align: center;
        margin-bottom: 20px;
    }

    .data-input-domains {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .function-block {
        padding: 15px;
        border: 1px solid #ccc;
        border-radius: 8px;
        background-color: #f9f9f9;
        justify-content: center;
        align-items: center;
        text-align: center;
    }

    .dimension-block {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-top: 10px;
        justify-content: center;
        align-items: center;
    }

    .custom-input {
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 80px;
        text-align: center;
        justify-content: center;
        align-items: center;
    }

    .results-section {
        margin-top: 30px;
        text-align: center;
    }

    .results-table {
        width: 80%;
        margin: 0 auto;
        border-collapse: collapse;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        border: 1px solid red;
    }

        .results-table th, .results-table td {
            padding: 10px;
            border: 1px solid #ddd;
            text-align: center;
        }

        .results-table th {
            background-color: #f4f4f4;
            font-weight: bold;
        }

        .results-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .results-table tr:hover {
            background-color: #f1f1f1;
        }

    .btnSubmit {
        padding: 20px;
        position: relative;
        width: 100px;
        height: 40px;
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>

@page "/reports"
@rendermode InteractiveServer
@inject HttpClient HttpClient
@using System.Timers
@using System.Text.Json

<PageTitle>Reports</PageTitle>

<div class="data-header">
    <button class="btnSubmit" @onclick="AllReports">All Reports</button>
</div>

<div class="data-header">
    <button class="btnSubmit" @onclick="LastReport">Last Report</button>
</div>

<div class="data-header">
    <h3>Status: @statusMessage</h3>
</div>

<div class="results-section">
    <h2>Results</h2>
    @if (OneReport != null && OneReport.Any())
    {
        <table class="results-table">
            <thead>
                <tr>
                    <th>Best Fitness</th>
                    <th>X Best</th>
                    <th>Algorithm Name</th>
                    <th>Algorithm Function</th>
                    <th>Parameters</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var report in OneReport)
                {
                    <tr>
                        <td>@report.FBest</td>
                        <td>@report.XBest</td>
                        <td>@report.AlgorithmName</td>
                        <td>@report.AlgorithmFunction</td>
                        <td>@report.Parameters</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (ReportsAll != null && ReportsAll.Any())
    {
        foreach(var report in ReportsAll)
		{
			<table class="results-table">
				<thead>
					<tr>
						<th>Best Fitness</th>
						<th>X Best</th>
						<th>Algorithm Name</th>
						<th>Algorithm Function</th>
						<th>Parameters</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var r in report)
					{
						<tr>
							<td>@r.FBest</td>
							<td>@r.XBest</td>
							<td>@r.AlgorithmName</td>
							<td>@r.AlgorithmFunction</td>
							<td>@r.Parameters</td>
						</tr>
					}
				</tbody>
			</table>
            <p/>
		}
    }
    else
    {
        <p>No results to display. Submit data to see results.</p>
    }
</div>




@code {


    private List<Report> OneReport { get; set; } = new();
    private List<List<Report>> ReportsAll { get; set; } = new();

    private string statusMessage = "Awaiting submission...";

    private async Task LastReport()
    {
        statusMessage = "Awaiting submission...";
        ReportsAll = new();

        try
        {
            var responseModel = await HttpClient.GetStringAsync("/api/Database/RaportOstatni");


            if (responseModel != null)
            {
                var responseJson = JsonSerializer.Deserialize<ResponseModel>(responseModel, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                OneReport = responseJson.Reports;

                statusMessage = "Submission successful!";
            }
            else
            {
                statusMessage = "Response JSON is invalid or missing reports.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
    }

    private async Task AllReports()
    {
        OneReport = new();
        statusMessage = "Awaiting submission...";

        try
        {
            var responseModel = await HttpClient.GetFromJsonAsync<List<ResponseModel>>("/api/Database/Raporty");


            if (responseModel != null)
            {

                foreach(var x in responseModel)
                {
                    ReportsAll.Add(x.Reports);
                }

                statusMessage = "Submission successful!";
            }
            else
            {
                statusMessage = "Response JSON is invalid or missing reports.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
    }

    public class Report
    {
        public string XBest { get; set; }
        public double FBest { get; set; }
        public string AlgorithmName { get; set; }
        public string AlgorithmFunction { get; set; }
        public string Parameters { get; set; }
    }


    public class ResponseModel
    {
        public string Id { get; set; }
        public List<Report> Reports { get; set; }
        public DateTime CreatedAt { get; set; }
    }

}

<style>



    .data-header {
        padding: 20px;
        position: relative;
        width: 100%;
        height: 80px;
        display: flex;
        justify-content: center;
        align-items: center;
    }


    .data-input {
        position: relative;
        width: 100%;
        height: 50px;
        display: flex;
        justify-content: center;
        align-items: center;
    }


    .results-section {
        margin-top: 30px;
        text-align: center;
    }

    .results-table {
        width: 80%;
        margin: 0 auto;
        border-collapse: collapse;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        border: 1px solid red;
    }

        .results-table th, .results-table td {
            padding: 10px;
            border: 1px solid #ddd;
            text-align: center;
        }

        .results-table th {
            background-color: #f4f4f4;
            font-weight: bold;
        }

        .results-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .results-table tr:hover {
            background-color: #f1f1f1;
        }

    .btnSubmit {
        padding: 20px;
        position: relative;
        width: 150px;
        height: 50px;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #007bff;
    }

    .btnSubmit:hover {
		background-color: #0056b3;
	}

    .btnSubmit:active {
        background-color: blue;
    }
        
</style>
